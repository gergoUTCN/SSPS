classdef ssps
## -*- texinfo -*-
##
## Summary of Single Sided Power Signal (ssps) Class
##
## @deftypefn  {} {} ssps()
## @deftypefnx  {} {} ssps(@var{name},@var{fres},[0 @var{flim}])
##
##     Methods:
## @table @asis
## @item constructor
##     @table
##     @item  @code {obj = ssps} - verbose instantiation of object; the user can input the instantioation parameters in the console:
##
##
##     @code {Signal name (ie. noise, tone, carrier, etc.):tone}
##     @code {Frequency resolution (MHz):100}
##     @code {Full-bandwidth (GHz):1}
##
##     @item @code{obj = ssps(@var{name},@var{fres},[0 @var{flim}])} - ssps class constructor; the user can instantiate programatically a ssps class object
##
##     @tabel
##     @item @val{name} - the name of the signal
##     @item @var{fres} - the required resolution frequency
##     @item [0 @var{flim}] -  the bandwidth of interest
##     @end table
##
## @item ssps.disp
##        disp - display the power spectrum within the class
##
## @end table
##
##     ssps Properties:
## @table
##     @item   name - Name of a signal
##     @item   frequency_base - The freqeuncy base generated by the class constructor
##                       - a vector with uniformly spaced values between 0 and Flim
##     @item   ssp - single sided power
## @end table
## @end deftypefn
  properties (Access = private)
    Pmin = 0
	kB = 1.380649e-23; #Joule/Kelvin
    T = 300; #Kelvin
  endproperties
  properties
    name
    frequency_base
    ssp
  endproperties
  methods
    function disp(obj)
      ## @deftypefn  {} {} disp (@var{obj})
      ## Display ssps class object.
      plot(obj.frequency_base/1e9,obj.ssp);
      title(obj.name);
      xlabel("Frequency (GHz)");
      ylabel("Power (W)");
      xlim([obj.frequency_base(1)  obj.frequency_base(end)]./1e9);
      grid on;
    endfunction




    function obj = ssps(obj)
      obj.name = input("Signal name (ie. noise, tone, carrier, etc.):",'s');
      fres = str2num(input("Frequency resolution (MHz):",'s'))*1e6;
      flim = str2num(input("Full-bandwidth (GHz):",'s'))*1e9;
      obj.frequency_base = 0:fres:flim;
      obj.ssp = zeros(size(obj.frequency_base)) + 1e-374;
      disp(obj);
    endfunction


    function obj = ssps(varargin)
      switch (length(varargin))
        case -1
          disp ("Usage");
        case 0
          obj.name = input("Signal name (ie. noise, tone, carrier, etc.):",'s');
          fres = str2num(input("Frequency resolution (MHz):",'s'))*1e6;
          flim = str2num(input("Full-bandwidth (GHz):",'s'))*1e9;
          obj.frequency_base = 0:fres:flim;
          obj.ssp = zeros(size(obj.frequency_base)) + obj.Pmin;
          disp(obj);
        otherwise
          fres = varargin{2};
          flim = varargin{3};
          obj.name = varargin{1};
          obj.frequency_base = flim(1):fres:flim(2);
          obj.ssp = zeros(size(obj.frequency_base)) + obj.Pmin;
      endswitch
    endfunction


    function val  = flim(obj)
      val = obj.frequency_base(end);
    endfunction




    function val = fres(obj)
      val = obj.frequency_base(2)-obj.frequency_base(1);
    endfunction




    function val = length(obj)
      val = length(obj.frequency_base);
    endfunction




    function val = dBm(obj)
      plot(obj.frequency_base./1e9,10*log10(obj.ssp/0.001));
      title(obj.name);
      xlabel("Frequency (GHz)");
      ylabel("Power (dBm)");
      xlim([obj.frequency_base(1)  obj.frequency_base(end)]./1e9);
      grid on;
    endfunction


	function dBFS(obj,FullScale,Resolution,R)
      voltage = sqrt(obj.ssp*R);
      plot(obj.frequency_base./1e9,20*log10(voltage/FullScale));
      title(obj.name);
      xlabel("Frequency (GHz)");
      ylabel("Voltage (dBFS)");
      xlim([obj.frequency_base(1)  obj.frequency_base(end)]./1e9);
      grid on;
    endfunction



     function val = dB(obj)
      plot(obj.frequency_base./1e9,10*log10(obj.ssp));
      title(obj.name);
      xlabel("Frequency (GHz)");
      ylabel("Gain (dB)");
      xlim([obj.frequency_base(1)  obj.frequency_base(end)]./1e9);
      grid on;
    endfunction

    function val = dBloglog(obj)
      semilogx(obj.frequency_base./1e9,10*log10(obj.ssp));
      title("Log-mag transmission characteristics of 5th order low pass filter");
     % title(obj.name);
      xlabel("Frequency (GHz)");
      ylabel("Gain (dB)");
      xlim([obj.frequency_base(1)  obj.frequency_base(end)]./1e9);
      grid on;
    endfunction




    function val = stem(obj)
      stem(obj.frequency_base./1e9,10*log10(obj.ssp/0.001));
      title(obj.name);
      xlabel("Frequency (GHz)");
      ylabel("Power (dBm)");
      xlim([obj.frequency_base(1)  obj.frequency_base(end)]./1e9);
      grid on;
    endfunction




    function obj = padding(obj, N);
      obj.frequency_base = [obj.frequency_base (1:N)*obj.fres + obj.frequency_base(end)];
      obj.ssp = [obj.ssp zeros(1,N)];
    endfunction




    function val = copy(obj)
      val = obj;
    endfunction




    function ret = plus(op1,op2)
      if (op1.fres == op2.fres)
        padding = op1.length - op2.length;
        if padding > 0
          op2 = op2.padding(padding);
        elseif padding < 0
          op1 = op1.padding(-padding);
        endif
        ret = op1.copy;
        ret.ssp = op1.ssp + op2.ssp;
        ret.name = ["(" op1.name ")+(" op2.name ")" ];
      else
        obj = [];
      endif
    endfunction




    function ret = times(op1,op2)
      if (op1.fres == op2.fres)
        padding = op1.length - op2.length;
        if padding > 0
          op2 = op2.padding(padding);
        elseif padding < 0
          op1 = op1.padding(-padding);
        endif
        ret = op1.copy;
        ret.ssp = op1.ssp .* op2.ssp;
        ret.name = ["(" op1.name ")*(" op2.name ")" ];
      else
        obj = [];
        disp("Could not perform '*' operation");
      endif
    endfunction




    function ret = not(obj)
        ret = obj;
        ret.frequency_base = -(obj.frequency_base(end:-1:1));
        ret.ssp = obj.ssp(end:-1:1);
        ret.name = [obj.name "'"];
    endfunction


    function obj = setName(obj,name)
        obj.name = name;
    endfunction

    function ret = horzcat(op1,op2)
      if (op1.fres == op2.fres)
        freq_base = [op1.frequency_base(1) op2.frequency_base(end)];
        name = ["[" op1.name " " op2.name "]"];
        ret = ssps(name, op1.fres, freq_base);
        ret.ssp = [op1.ssp(1:end-1) op2.ssp];
      else
        obj = [];
        disp("Could not perform '[a b]' operation");
      endif
    endfunction




    function ret = mtimes(op1,op2)
      if (op1.fres == op2.fres)
        cop1 = [!op1 op1];
        cop2 = [!op2 op2];
        ret = op1;
        ssp = conv(cop1.ssp,cop2.ssp,"same");
        ret.ssp = ssp(end - op1.length + 1 : end);
        ret.name = [op1.name "*" op2.name];
      else
        obj = [];
        disp("Could not perform '*' operation");
      endif
    endfunction




    function obj = subsasgn(obj,ind,val)
      id = ind.subs{:};
      liv = find(id(1) <= obj.frequency_base);
      li = liv(1);
      riv = find(id(2) <= obj.frequency_base);
      ri = riv(1);
      obj.ssp(li:ri) = val;
    endfunction

 function ret = cut(obj,ind)
       liv = find(ind(1) <= obj.frequency_base);
       li = liv(1);
       riv = find(ind(2) <= obj.frequency_base);
       ri = riv(1);
       ret = ssps([obj.name "[" num2str(ind(1)) " " num2str(ind(2)) "]"],obj.fres, [ind(1) ind(2)]);
       ret.ssp = obj.ssp(li:ri);
    endfunction


    function ret = peakAndHarmonics(obj,f_fund, power_peaks)
      ret = ssps("Peak and harmonics",obj.fres, [0 obj.flim]);
      f_h1 = 2*f_fund;
      f_h2 = 3*f_fund;
      power = zeros(1,obj.length);
      if(f_fund < obj.frequency_base(end))
        liv_1 = find(f_fund <= obj.frequency_base);
        li_1 = liv_1(1);
        power(li_1) = power_peaks(1);
      end

       if(f_h1 < obj.frequency_base(end))
          liv_2 = find(f_h1 <= obj.frequency_base);
          li_2 = liv_2(1);
          power(li_2) = power_peaks(2);
        end
       if(f_h2 < obj.frequency_base(end))
          liv_3 = find(f_h2 <= obj.frequency_base);
          li_3 = liv_3(1);
          power(li_3) = power_peaks(3);
       end

      ret.ssp = power;

    endfunction


    function obj = addPeakAndHarmonics(obj,f_fund,power_peaks)
      f_h1 = 2*f_fund;
      f_h2 = 3*f_fund;
      power = zeros(1,obj.length);
     if(f_fund < obj.frequency_base(end))
      liv_1 = find(f_fund <= obj.frequency_base);
      li_1 = liv_1(1);
      power(li_1) = power_peaks(1);
    end
      if(f_h1 < obj.frequency_base(end))
        liv_2 = find(f_h1 <= obj.frequency_base);
        li_2 = liv_2(1);
        power(li_2) = power_peaks(2);
      end

      if(f_h2 < obj.frequency_base(end))
        liv_3 = find(f_h2 <= obj.frequency_base);
        li_3 = liv_3(1);
        power(li_3) = power_peaks(3);
      end
      obj.ssp = power;
    endfunction

	function ret = quantizationNoise(obj, Fs, Res, R,band)
      ret = ssps("N_(quant)",obj.fres, [0 obj.flim]);
      T = Fs^2/2^(2*Res+2)/band/R/obj.kB;
      PdBm = 10*log10(obj.kB*T/0.001);
      ret.ssp = (wgn(1,obj.length,PdBm+10*log10(band),'dBm',R)).^2/R;
    endfunction


    function obj = addQuantizationNoise(obj, Fs, Res, R,band)
      T = Fs^2/2^(2*Res+2)/band/R/obj.kB;
      PdBm = 10*log10(obj.kB*T/0.001);
      obj.ssp = obj.ssp + (wgn(1,obj.length,PdBm+10*log10(band),'dBm',R)).^2/R;
    endfunction


    function ret = thermalNoise(obj,R,band)
      ret = ssps("N_(thermal)",obj.fres, [0 obj.flim]);
      ret.ssp = (wgn(1,obj.length,-174+10*log10(band),'dBm',R)).^2/R;
    endfunction


    function obj = addThermalNoise(obj,R,band)
      obj.ssp = obj.ssp + (wgn(1,obj.length,-174+10*log10(band),'dBm',R)).^2/R;
    endfunction




    function ret = tone(obj,freq, power)
      ret = ssps([num2str(freq/1e9) "GHz tone"],obj.fres, [0 obj.flim]);
      liv = find(freq <= obj.frequency_base);
      li = liv(1);
      ret.ssp(li) = power;
    endfunction




    function obj = addTone(obj,freq, power)
      liv = find(freq <= obj.frequency_base);
      li = liv(1);
      obj.ssp(li) = power;
    endfunction




    function ret = bandpass(obj,central_frequency, bandwidth, power)
      ret = ssps([num2str(central_frequency/1e9) " GHz BandPass"],obj.fres, [0 obj.flim]);
      lf = central_frequency - bandwidth/2;
      liv = find(lf <= obj.frequency_base);
      li = liv(1);
      rf = central_frequency + bandwidth/2;
      riv = find(rf <= obj.frequency_base);
      ri = riv(1);
      ret.ssp(li:ri) = power;
    endfunction




    function obj = addBandpass(obj,central_frequency, bandwidth, power)
      lf = central_frequency - bandwidth/2;
      liv = find(lf <= obj.frequency_base);
      li = liv(1);
      rf = central_frequency + bandwidth/2;
      riv = find(rf <= obj.frequency_base);
      ri = riv(1);
      obj.ssp(li:ri) = obj.ssp(li:ri) + power;
    endfunction




    function ret = constant(obj,const)
      ret = ssps("Const",obj.fres, [0 obj.flim]);
      ret.ssp = const;
    endfunction




    function ret = addConstant(obj,const)
      ret = ssps("Const",obj.fres, [0 obj.flim]);
      ret.ssp = ret.ssp + const;
    endfunction






    function obj = BPF(obj, fc1,fc2,ord_bp1,ord_bp2,flim)
      freq = obj.frequency_base;
      noise_floor_dBm = -174+10*log10(flim);
      %upper band
      stopband = find(freq >= fc2);
      fcutindex = stopband(1);
      %number of decades for one step in frequency
      decades = diff(log10(freq(stopband)));
      %adding attennuation corresponding to the difference of the studied frequency to the cutoff frequency
      mask_dB_bp = zeros(1,length(freq));
      for i=1:(length(decades))
        mask_dB_bp(fcutindex + i) = mask_dB_bp(fcutindex + i - 1) - 20*ord_bp2*decades(i);
      end
       %arrange last element
       mask_dB_bp(fcutindex+length(decades)) =  mask_dB_bp(fcutindex+length(decades)-1)- 20*ord_bp2*decades(length(decades));

    %the same operation for the lower band
      stopband = find(freq <= fc1);
      fcutindex = stopband(end);
      decades = -diff(log10(freq(stopband(end:-1:1))));
      for i=1:length(decades)
        mask_dB_bp(fcutindex - i) = mask_dB_bp(fcutindex - i + 1) - 20*ord_bp1*decades(i);
      end
      mask_dB_bp = max(mask_dB_bp,noise_floor_dBm);
      obj.ssp = 10.^(mask_dB_bp/10);
    end








    function obj = HPF(obj,fc,ord_hp, flim)
      freq = obj.frequency_base;
      noise_floor_dBm = -174+10*log10(flim);
      mask_dB_hp = zeros(1,length(freq));
      stopband = find(freq <= fc);
      fcutindex = stopband(end);
      decades = -diff(log10(freq(stopband(end:-1:1))));
      for i=1:length(decades)
        mask_dB_hp(fcutindex - i) = mask_dB_hp(fcutindex - i + 1) - 20*ord_hp*decades(i);
      end

      %arrange last element

      mask_dB_hp = max(mask_dB_hp,noise_floor_dBm);
      mask_dB_hp(end) = mask_dB_hp(end-1);
      obj.ssp = 10.^(mask_dB_hp/10);
    end





    function obj = LPF(obj,fc,ord_lp, flim)
      freq = obj.frequency_base;
      noise_floor_dBm = -174+10*log10(flim);
      stopband = find(freq >= fc);
      fcutindex = stopband(1);
      mask_dB_lp = zeros(1,length(freq));
      decades = diff(log10(freq(stopband)));
      for i=1:length(decades)
          mask_dB_lp(fcutindex + i ) = mask_dB_lp(fcutindex + i - 1) - 20*ord_lp*decades(i);
      end
      mask_dB_lp = max(mask_dB_lp,noise_floor_dBm);
      mask_dB_lp(end) = mask_dB_lp(end-1);
      obj.ssp = 10.^(mask_dB_lp/10);
    end




    function ret = time(obj)
      ret = obj.length * 1/obj.fres;
    endfunction

    function ret = ssb(obj)
      ret = obj;
      midIndexVector = find(0 <= obj.frequency_base);
      midIndex= midIndexVector(1);
      ret.frequency_base = obj.frequency_base(midIndex:end);
      ret.ssp = obj.ssp(midIndex:end);
    endfunction
    function ret = sampling(obj, Fs);
      flim = obj.flim;
      nrOfFsInBand = floor(flim/Fs);
      FsVector= Fs*(1:nrOfFsInBand);

      ret = obj;

      for i = 1:length(FsVector)
        carrier = obj;
        carrier.ssp(1:end) = 0;
        carrier = carrier.addTone(FsVector(i),1);
        ret = ret +  obj * carrier;
      endfor

      ret.name = [obj.name "sampled @" num2str(Fs/1e9) "GHz"];
    endfunction
















  endmethods
endclassdef


